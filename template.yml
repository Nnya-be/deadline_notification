AWSTemplateFormatVersion: '2010-09-09'

Transform: AWS::Serverless-2016-10-31

Description: Task Management System Backend

Parameters:
  Environment:
    Type: String
    Default: Production
    AllowedValues:
      - Development
      - Staging
      - Production
    Description: Environment for the deployment

  AccountId:
    Type: String
    Default: '597088025512'
    Description: AWS Account ID for resource ARNs

  Region:
    Type: String
    Default: eu-central-1
    Description: AWS Region for deployment

Globals:
  Function:
    Runtime: java21
    MemorySize: 512
    Timeout: 30
    CodeUri: DeadlineNotification/
    Tracing: Active
    AutoPublishAlias: live
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
    Tags:
      Environment: !Ref Environment
      Service: TaskManagement

Resources:
  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Tasks
      AttributeDefinitions:
        - AttributeName: taskId
          AttributeType: S
      KeySchema:
        - AttributeName: taskId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  EventBridgeSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub EventBridgeSchedulerRole-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - scheduler.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref EventBridgeSchedulerPolicy
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: TaskManagement

  EventBridgeSchedulerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub EventBridgeSchedulerPolicy-${Environment}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - NotAction: "*"
            Effect: Deny
            Resource: "*"

  CreateDeadlineEventLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub CreateDeadlineEventLambda-${Environment}
      Handler: deadline_notification.handlers.notification.CreateDeadlineEvent::handleRequest
      CodeUri: DeadlineNotification/
      Description: Lambda function to create deadline events from DynamoDB Streams
      Environment:
        Variables:
          SCHEDULER_ROLE_ARN: !GetAtt EventBridgeSchedulerRole.Arn
          TARGET_LAMBDA_ARN: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ReminderProcessorLambda-${Environment}
          TABLE_NAME: !Ref TasksTable
          ACCOUNT_ID: !Ref AccountId
          REGION: !Ref Region

      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TasksTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DescribeStream
                - dynamodb:GetRecords
                - dynamodb:GetShardIterator
                - dynamodb:ListStreams
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt TasksTable.StreamArn
        - Statement:
            - Effect: Allow
              Action:
                - scheduler:CreateSchedule
              Resource: !Sub arn:aws:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/*
            - Effect: Allow
              Action: iam:PassRole
              Resource: !GetAtt EventBridgeSchedulerRole.Arn
      Events:
        DynamoStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt TasksTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 10
            Enabled: true
            FilterCriteria:
              Filters:
                - Pattern: '{"dynamodb": {"NewImage": {"status": {"S": ["CREATED"]}}}}'

  ReminderProcessorLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ReminderProcessorLambda-${Environment}
      Handler: deadline_notification.handlers.notification.ReminderProcessorLambda::handleRequest
      CodeUri: DeadlineNotification/
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_ID: "us-east-1_ExampleUserPool" # Replace with actual Cognito User Pool ID
          TABLE_NAME: !Ref TasksTable
          ACCOUNT_ID: !Ref AccountId
          REGION: !Ref Region
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TasksTable
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminGetUser
              Resource: "arn:aws:cognito-idp:us-east-1:123456789012:userpool/us-east-1_ExampleUserPool"
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: "*"

  UpdateTaskScheduleLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub UpdateTaskScheduleLambda-${Environment}
      Handler: deadline_notification.handlers.notification.UpdateTaskScheduleLambda::handleRequest
      CodeUri: DeadlineNotification/
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          TARGET_LAMBDA_ARN: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ReminderProcessorLambda-${Environment}
          SCHEDULER_ROLE_ARN: !GetAtt EventBridgeSchedulerRole.Arn
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TasksTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DescribeStream
                - dynamodb:GetRecords
                - dynamodb:GetShardIterator
                - dynamodb:ListStreams
              Resource: !GetAtt TasksTable.StreamArn
            - Effect: Allow
              Action:
                - scheduler:CreateSchedule
                - scheduler:DeleteSchedule
                - scheduler:GetSchedule
                - iam:PassRole
              Resource: "*"
      Events:
        DynamoStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt TasksTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 10
            Enabled: true
